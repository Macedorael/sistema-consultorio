#!/usr/bin/env python3
"""
Script para diagnosticar problemas espec√≠ficos de produ√ß√£o
"""

import os
import sys
from io import StringIO

def debug_production_environment():
    """Simula ambiente de produ√ß√£o e diagnostica problemas"""
    
    print("üîß DIAGN√ìSTICO DO AMBIENTE DE PRODU√á√ÉO")
    print("=" * 60)
    
    # Simular vari√°veis de ambiente de produ√ß√£o
    print("\n1. Configurando ambiente de produ√ß√£o...")
    print("-" * 40)
    
    # Backup das vari√°veis originais
    original_env = {
        'FLASK_ENV': os.environ.get('FLASK_ENV'),
        'DATABASE_URL': os.environ.get('DATABASE_URL')
    }
    
    # Configurar ambiente de produ√ß√£o
    os.environ['FLASK_ENV'] = 'production'
    os.environ['DATABASE_URL'] = 'postgresql://user:pass@localhost/db'  # URL fict√≠cia
    
    print(f"   FLASK_ENV: {os.environ.get('FLASK_ENV')}")
    print(f"   DATABASE_URL: {os.environ.get('DATABASE_URL')[:50]}...")
    
    # Capturar logs de inicializa√ß√£o
    print("\n2. Testando inicializa√ß√£o em modo produ√ß√£o...")
    print("-" * 40)
    
    captured_output = StringIO()
    old_stdout = sys.stdout
    
    try:
        # Limpar m√≥dulos j√° importados para for√ßar reimporta√ß√£o
        modules_to_remove = []
        for module_name in sys.modules.keys():
            if module_name.startswith('src.'):
                modules_to_remove.append(module_name)
        
        for module_name in modules_to_remove:
            del sys.modules[module_name]
        
        # Capturar logs
        sys.stdout = captured_output
        
        # Importar novamente com ambiente de produ√ß√£o
        from src.main import app
        
        # Restaurar stdout
        sys.stdout = old_stdout
        
        # Analisar logs
        output = captured_output.getvalue()
        print("\nüìã LOGS DE INICIALIZA√á√ÉO (PRODU√á√ÉO):")
        print("-" * 40)
        
        errors = []
        warnings = []
        success = []
        
        for line in output.split('\n'):
            if line.strip():
                if '[ERROR]' in line:
                    errors.append(line)
                    print(f"‚ùå {line}")
                elif '[DEBUG]' in line and 'OK' in line:
                    success.append(line)
                    print(f"‚úÖ {line}")
                elif '[DEBUG]' in line:
                    print(f"‚ÑπÔ∏è  {line}")
                else:
                    print(f"   {line}")
        
        print("\n3. Verificando rotas em modo produ√ß√£o...")
        print("-" * 40)
        
        # Verificar rotas registradas
        api_routes = []
        for rule in app.url_map.iter_rules():
            if rule.rule.startswith('/api'):
                api_routes.append(rule.rule)
        
        critical_routes = ['/api/login', '/api/especialidades', '/api/funcionarios']
        
        print(f"Total de rotas API: {len(api_routes)}")
        for route in critical_routes:
            found = route in api_routes
            status = "‚úÖ OK" if found else "‚ùå FALTANDO"
            print(f"   {route}: {status}")
        
        print("\n4. Testando configura√ß√£o de banco de dados...")
        print("-" * 40)
        
        try:
            # Testar configura√ß√£o do banco
            db_config = app.config.get('SQLALCHEMY_DATABASE_URI')
            print(f"   Database URI: {db_config[:50] if db_config else 'N√ÉO CONFIGURADO'}...")
            
            # Verificar se h√° problemas de conex√£o simulados
            if 'postgresql://' in str(db_config):
                print("   ‚úÖ Configura√ß√£o PostgreSQL detectada")
            elif 'sqlite://' in str(db_config):
                print("   ‚ö†Ô∏è  Usando SQLite (desenvolvimento)")
            else:
                print("   ‚ùå Configura√ß√£o de banco n√£o reconhecida")
                
        except Exception as e:
            print(f"   ‚ùå Erro na configura√ß√£o do banco: {e}")
        
        print("\n5. Resumo do diagn√≥stico...")
        print("-" * 40)
        print(f"   Erros encontrados: {len(errors)}")
        print(f"   Importa√ß√µes bem-sucedidas: {len(success)}")
        
        if errors:
            print("\n‚ùå ERROS CR√çTICOS:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
        
        if len(api_routes) < 10:  # Esperamos pelo menos 10 rotas API
            print("\n‚ö†Ô∏è  AVISO: Poucas rotas API registradas")
        
    except Exception as e:
        sys.stdout = old_stdout
        print(f"‚ùå ERRO CR√çTICO durante inicializa√ß√£o: {str(e)}")
        print(f"Tipo: {type(e).__name__}")
        
        # Mostrar logs capturados
        output = captured_output.getvalue()
        if output:
            print("\nüìã LOGS ANTES DO ERRO:")
            for line in output.split('\n'):
                if line.strip() and '[ERROR]' in line:
                    print(f"‚ùå {line}")
    
    finally:
        # Restaurar vari√°veis de ambiente originais
        for key, value in original_env.items():
            if value is not None:
                os.environ[key] = value
            elif key in os.environ:
                del os.environ[key]
    
    print("\n" + "=" * 60)
    print("üéØ CONCLUS√ïES")
    print("=" * 60)
    print("- Se h√° erros em produ√ß√£o mas n√£o em dev: problema de configura√ß√£o")
    print("- Se rotas n√£o s√£o registradas: problema de importa√ß√£o ou depend√™ncia")
    print("- Se banco falha: problema de URL ou credenciais")
    print("- Verifique os logs do Render para confirmar o diagn√≥stico")

if __name__ == '__main__':
    debug_production_environment()