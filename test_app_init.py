#!/usr/bin/env python3
"""
Script para testar a inicializa√ß√£o da aplica√ß√£o
"""

import os
import sys
from io import StringIO

def test_app_initialization():
    """Testa a inicializa√ß√£o da aplica√ß√£o capturando logs"""
    
    print("üöÄ TESTE DE INICIALIZA√á√ÉO DA APLICA√á√ÉO")
    print("=" * 50)
    
    # Capturar stdout para ver os logs de debug
    old_stdout = sys.stdout
    captured_output = StringIO()
    sys.stdout = captured_output
    
    try:
        print("\n1. Testando importa√ß√£o do main.py...")
        sys.stdout = old_stdout  # Restaurar para mostrar esta mensagem
        
        # Capturar novamente para os logs de importa√ß√£o
        sys.stdout = captured_output
        
        # Importar o m√≥dulo main (isso executar√° todos os prints de debug)
        from src.main import app
        
        # Restaurar stdout
        sys.stdout = old_stdout
        
        # Mostrar os logs capturados
        output = captured_output.getvalue()
        print("\nüìã LOGS DE INICIALIZA√á√ÉO:")
        print("-" * 30)
        for line in output.split('\n'):
            if line.strip():
                if '[ERROR]' in line:
                    print(f"‚ùå {line}")
                elif '[DEBUG]' in line:
                    print(f"‚úÖ {line}")
                else:
                    print(f"‚ÑπÔ∏è  {line}")
        
        print("\n2. Testando rotas registradas...")
        print("-" * 30)
        
        # Listar todas as rotas registradas
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                'endpoint': rule.endpoint,
                'methods': list(rule.methods),
                'rule': rule.rule
            })
        
        # Filtrar rotas da API
        api_routes = [r for r in routes if r['rule'].startswith('/api')]
        
        print(f"Total de rotas: {len(routes)}")
        print(f"Rotas da API: {len(api_routes)}")
        
        print("\nüìç ROTAS DA API REGISTRADAS:")
        for route in sorted(api_routes, key=lambda x: x['rule']):
            methods = [m for m in route['methods'] if m not in ['HEAD', 'OPTIONS']]
            print(f"   {route['rule']} -> {methods} ({route['endpoint']})")
        
        # Verificar rotas espec√≠ficas que est√£o falhando
        critical_routes = ['/api/login', '/api/especialidades', '/api/funcionarios']
        print("\nüîç VERIFICA√á√ÉO DE ROTAS CR√çTICAS:")
        for critical_route in critical_routes:
            found = any(r['rule'] == critical_route for r in api_routes)
            status = "‚úÖ ENCONTRADA" if found else "‚ùå N√ÉO ENCONTRADA"
            print(f"   {critical_route}: {status}")
        
        print("\n3. Testando configura√ß√£o da aplica√ß√£o...")
        print("-" * 30)
        print(f"   Debug mode: {app.debug}")
        print(f"   Testing mode: {app.testing}")
        print(f"   Environment: {os.environ.get('FLASK_ENV', 'n√£o definido')}")
        print(f"   Database URL: {os.environ.get('DATABASE_URL', 'n√£o definido')[:50]}...")
        
    except Exception as e:
        sys.stdout = old_stdout
        print(f"‚ùå ERRO durante inicializa√ß√£o: {str(e)}")
        print(f"Tipo do erro: {type(e).__name__}")
        
        # Mostrar logs capturados mesmo em caso de erro
        output = captured_output.getvalue()
        if output:
            print("\nüìã LOGS CAPTURADOS ANTES DO ERRO:")
            print("-" * 30)
            for line in output.split('\n'):
                if line.strip():
                    if '[ERROR]' in line:
                        print(f"‚ùå {line}")
                    elif '[DEBUG]' in line:
                        print(f"‚úÖ {line}")
                    else:
                        print(f"‚ÑπÔ∏è  {line}")
    
    print("\n" + "=" * 50)
    print("üìä DIAGN√ìSTICO")
    print("=" * 50)
    print("- Se h√° erros de importa√ß√£o: problema de depend√™ncias ou sintaxe")
    print("- Se rotas cr√≠ticas n√£o est√£o registradas: problema no blueprint")
    print("- Se tudo parece OK: problema pode ser espec√≠fico do ambiente Render")

if __name__ == '__main__':
    test_app_initialization()