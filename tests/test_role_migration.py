#!/usr/bin/env python3
"""
Script para testar a migra√ß√£o da coluna 'role' localmente
"""

import os
import sys
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.exc import SQLAlchemyError

def get_database_url():
    """Obt√©m a URL da base de dados local"""
    return 'sqlite:///src/database/app.db'

def test_role_migration():
    """Testa a migra√ß√£o da coluna role"""
    print("üß™ TESTANDO MIGRA√á√ÉO DA COLUNA 'ROLE'")
    print("=" * 50)
    
    database_url = get_database_url()
    engine = create_engine(database_url)
    
    try:
        # 1. Verificar estrutura atual
        print("\n1Ô∏è‚É£ Verificando estrutura atual da tabela users...")
        inspector = inspect(engine)
        columns = inspector.get_columns('users')
        column_names = [col['name'] for col in columns]
        
        print(f"   Colunas encontradas: {column_names}")
        
        if 'role' in column_names:
            print("   ‚úÖ Coluna 'role' j√° existe")
        else:
            print("   ‚ùå Coluna 'role' n√£o existe")
        
        # 2. Verificar usu√°rios atuais
        print("\n2Ô∏è‚É£ Verificando usu√°rios atuais...")
        with engine.connect() as conn:
            if 'role' in column_names:
                result = conn.execute(text("SELECT id, username, email, role FROM users"))
            else:
                result = conn.execute(text("SELECT id, username, email FROM users"))
            
            users = result.fetchall()
            print(f"   Total de usu√°rios: {len(users)}")
            
            for user in users:
                if 'role' in column_names:
                    print(f"   - ID: {user[0]}, Username: {user[1]}, Email: {user[2]}, Role: {user[3]}")
                else:
                    print(f"   - ID: {user[0]}, Username: {user[1]}, Email: {user[2]}, Role: N/A")
        
        # 3. Simular migra√ß√£o se necess√°rio
        if 'role' not in column_names:
            print("\n3Ô∏è‚É£ Simulando migra√ß√£o...")
            with engine.connect() as conn:
                # Adicionar coluna
                conn.execute(text("ALTER TABLE users ADD COLUMN role VARCHAR(20) DEFAULT 'user' NOT NULL"))
                print("   ‚úÖ Coluna 'role' adicionada")
                
                # Popular usu√°rios existentes
                result = conn.execute(text("UPDATE users SET role = 'user' WHERE role IS NULL OR role = ''"))
                print(f"   ‚úÖ {result.rowcount} usu√°rio(s) populado(s) com role 'user'")
                
                # Atualizar admin se existir
                admin_result = conn.execute(text("""
                    UPDATE users 
                    SET role = 'admin' 
                    WHERE email = 'admin@consultorio.com' OR username = 'admin'
                """))
                
                if admin_result.rowcount > 0:
                    print(f"   ‚úÖ {admin_result.rowcount} usu√°rio(s) admin atualizado(s)")
                
                conn.commit()
        
        # 4. Verifica√ß√£o final
        print("\n4Ô∏è‚É£ Verifica√ß√£o final...")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT id, username, email, role FROM users"))
            users = result.fetchall()
            
            print("   Usu√°rios ap√≥s migra√ß√£o:")
            for user in users:
                print(f"   - ID: {user[0]}, Username: {user[1]}, Email: {user[2]}, Role: {user[3]}")
            
            # Contar por role
            role_count = conn.execute(text("SELECT role, COUNT(*) FROM users GROUP BY role"))
            roles = role_count.fetchall()
            
            print("\n   Distribui√ß√£o por role:")
            for role, count in roles:
                print(f"   - {role}: {count} usu√°rio(s)")
        
        print("\nüéâ TESTE DE MIGRA√á√ÉO CONCLU√çDO COM SUCESSO!")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        return False
    
    return True

if __name__ == "__main__":
    test_role_migration()