#!/usr/bin/env python3
"""
Script para testar o isolamento de dados no endpoint /medicos
Verifica se cada usu√°rio v√™ apenas seus pr√≥prios funcion√°rios
"""

import requests
import json

# Configura√ß√£o
BASE_URL = "http://localhost:5000"

def test_medicos_isolation():
    """Testa o isolamento de dados no endpoint /medicos"""
    
    print("=== TESTE DE ISOLAMENTO - ENDPOINT /medicos ===\n")
    
    # Dados de teste para dois usu√°rios diferentes
    users = [
        {"email": "admin@admin.com", "password": "admin123", "name": "Admin"},
        {"email": "teste@teste.com", "password": "teste123", "name": "Teste"}
    ]
    
    sessions = {}
    
    # 1. Fazer login com cada usu√°rio
    for user in users:
        print(f"üîê Fazendo login com {user['name']} ({user['email']})...")
        
        login_data = {
            "email": user["email"],
            "password": user["password"]
        }
        
        try:
            response = requests.post(f"{BASE_URL}/api/login", json=login_data)
            
            if response.status_code == 200:
                # Extrair cookies da sess√£o
                session_cookie = response.cookies.get('session')
                if session_cookie:
                    sessions[user['name']] = {'session': session_cookie}
                    print(f"‚úÖ Login bem-sucedido para {user['name']}")
                else:
                    print(f"‚ùå Erro: Cookie de sess√£o n√£o encontrado para {user['name']}")
                    return
            else:
                print(f"‚ùå Erro no login para {user['name']}: {response.status_code}")
                print(f"Resposta: {response.text}")
                return
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o no login para {user['name']}: {str(e)}")
            return
    
    print("\n" + "="*50)
    
    # 2. Testar endpoint /medicos para cada usu√°rio
    for user_name, session_data in sessions.items():
        print(f"\nüè• Testando /medicos para {user_name}...")
        
        cookies = {'session': session_data['session']}
        
        try:
            response = requests.get(f"{BASE_URL}/api/medicos", cookies=cookies)
            
            if response.status_code == 200:
                medicos = response.json()
                print(f"‚úÖ Resposta recebida para {user_name}")
                print(f"üìä Quantidade de m√©dicos/funcion√°rios: {len(medicos)}")
                
                if medicos:
                    print(f"üë• Lista de funcion√°rios para {user_name}:")
                    for i, medico in enumerate(medicos, 1):
                        print(f"   {i}. ID: {medico.get('id')}, Nome: {medico.get('nome')}, Especialidade: {medico.get('especialidade')}")
                else:
                    print(f"üìù Nenhum funcion√°rio encontrado para {user_name}")
                
                # Armazenar para compara√ß√£o
                sessions[user_name]['medicos'] = medicos
                
            else:
                print(f"‚ùå Erro ao buscar m√©dicos para {user_name}: {response.status_code}")
                print(f"Resposta: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o ao buscar m√©dicos para {user_name}: {str(e)}")
    
    print("\n" + "="*50)
    
    # 3. An√°lise de isolamento
    print("\nüîç AN√ÅLISE DE ISOLAMENTO:")
    
    user_names = list(sessions.keys())
    if len(user_names) >= 2:
        user1, user2 = user_names[0], user_names[1]
        
        medicos1 = sessions[user1].get('medicos', [])
        medicos2 = sessions[user2].get('medicos', [])
        
        # Verificar se h√° sobreposi√ß√£o de IDs
        ids1 = {medico['id'] for medico in medicos1}
        ids2 = {medico['id'] for medico in medicos2}
        
        overlap = ids1.intersection(ids2)
        
        if overlap:
            print(f"‚ùå VAZAMENTO DETECTADO!")
            print(f"   {user1} e {user2} compartilham funcion√°rios com IDs: {overlap}")
            print(f"   Isso indica que o isolamento de dados N√ÉO est√° funcionando!")
        else:
            print(f"‚úÖ ISOLAMENTO OK!")
            print(f"   {user1} e {user2} n√£o compartilham funcion√°rios.")
            print(f"   Cada usu√°rio v√™ apenas seus pr√≥prios dados.")
        
        print(f"\nüìà Resumo:")
        print(f"   - {user1}: {len(medicos1)} funcion√°rios")
        print(f"   - {user2}: {len(medicos2)} funcion√°rios")
        print(f"   - IDs compartilhados: {len(overlap)}")
    
    print("\n" + "="*50)
    print("‚úÖ Teste conclu√≠do!")

if __name__ == "__main__":
    test_medicos_isolation()